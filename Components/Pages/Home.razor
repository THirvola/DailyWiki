@using System.Text.Json
@page "/"
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1>Daily Wikipedia page guessing game</h1>
<h2>Category: @category</h2>
<h2>Title: @title</h2>
<h3>hint 1: @hint1</h3>
<p>hint 2:</p> @hint2

@code{
    string title = "None";
    string pageId = "0";
    string hint1 = "None";
    string category = "Physics";
    MarkupString hint2 = (MarkupString)"None";

    /// <summary>
    /// Ran automatically on initialization. Used for initializing the page
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        if (title.Equals("None"))
            await FetchPagesInCategory("Physics");

        try
        {
            var client = new HttpClient();
            //GET
            System.Diagnostics.Debug.WriteLine(title);
            HttpResponseMessage resp = await client.GetAsync("https://en.wikipedia.org/w/api.php?action=parse&format=json&page=" + title + "&formatversion=2");
            string respString = await resp.Content.ReadAsStringAsync();

            //Parsing response
            Stream responseStream = resp.Content.ReadAsStream();
            JsonElement jsonRoot = JsonDocument.Parse(responseStream).RootElement;
            JsonElement parseResult = jsonRoot.GetProperty("parse");
            hint1 = parseResult.GetProperty("properties").GetProperty("wikibase-shortdesc").GetString()!;
            hint2 = ParseWikipediaMarkup(parseResult.GetProperty("text").GetString()!, true);
        }
        catch
        {
            //todo: catch errors

        }
    }

    private async Task FetchPagesInCategory(string category)
    {
        //https://en.wikipedia.org/w/api.php?action=query&format=json&list=categorymembers&cmtitle=Category:Games

        List<string> Articles = new List<string>();
        try
        {
            string continueString = "";
            do
            {
                var client = new HttpClient();
                //GET
                HttpResponseMessage resp = await client.GetAsync("https://en.wikipedia.org/w/api.php?action=query&format=json&cmlimit=100&list=categorymembers&cmtitle=Category:" + category + continueString);
                string respString = await resp.Content.ReadAsStringAsync();

                //Parsing response
                Stream responseStream = resp.Content.ReadAsStream();
                JsonElement jsonRoot = JsonDocument.Parse(responseStream).RootElement;
                JsonElement parseResult = jsonRoot.GetProperty("query").GetProperty("categorymembers");

                //Listing all category members
                for (int i = 0; i < parseResult.GetArrayLength(); ++i)
                {
                    if (parseResult[i].GetProperty("ns").GetInt32() == 0)
                        Articles.Add(parseResult[i].GetProperty("title").GetString()!);
                }

                JsonElement continueProperty = new JsonElement();
                jsonRoot.TryGetProperty("continue", out continueProperty);
                if (continueProperty.ValueKind != JsonValueKind.Undefined)
                {
                    continueString = "&cmcontinue=" + continueProperty.GetProperty("cmcontinue").GetString()!;
                }
                else
                    continueString = "";

            } while (continueString.Length > 0);

            //Picking a random article to be the daily article in this category
            title = Articles[new System.Random(GetRandomSeed()).Next(0, Articles.Count)];
        }
        catch
        {
            //todo: catch errors

        }
    }

    private MarkupString ParseWikipediaMarkup(string source, bool stopAtHeader)
    {
        string parsed = "";
        //Extracting the paragraphs
        int index = source.IndexOf("<");
        if (index > 0)
            parsed = source.Substring(0, index);
        else if (index < 0)
            parsed = source;
        while (index >= 0 && index < source.Length && source.Substring(index).Contains("<"))
        {
            string tag = source.Substring(index + 1, source.IndexOf(">", index) - index - 1);
            string tagName = tag.Split(' ')[0];
            if (stopAtHeader && tagName.Length == 2 && tagName.StartsWith("h"))
                break;
            if (tag.Equals("p") || tag.Equals("i") || tag.Equals("b") || tagName.Equals("a"))
            {
                int tagEnd = source.IndexOf("</" + tagName + ">", index)+4;
                int nextTagStart = source.IndexOf("<", tagEnd);
                string paragraphContent = source.Substring(index + 2 + tag.Length, tagEnd - index - 6 - tag.Length);
                if (tag.Equals("b") || tag.Equals("i"))
                {
                    parsed += "<" + tag + ">";
                }

                if (tagName.Equals("p"))
                    System.Diagnostics.Debug.WriteLine(paragraphContent);

                //paragraphs may contain tags such as <sup> that should be removed
                parsed += ParseWikipediaMarkup(paragraphContent, false);
                if (tag.Equals("b") || tag.Equals("i"))
                {
                    parsed += "</" + tag + ">";
                }

                if (nextTagStart > tagEnd)
                    parsed += source.Substring(tagEnd, nextTagStart - tagEnd);
                index = nextTagStart;
            }
            else if (tag.EndsWith("/") || tag.StartsWith("/") || tagName.Equals("div") || !source.Contains("</" + tagName + ">"))
            {
                int tagEnd = source.IndexOf(">", index);
                int nextTagStart = source.IndexOf("<", tagEnd);
                if (nextTagStart > tagEnd + 1)
                    parsed += source.Substring(tagEnd + 1, nextTagStart - tagEnd - 1);
                index = nextTagStart;
            }
            else
            {
                int tagEnd = source.IndexOf("</" + tagName + ">", index) + 3 + tagName.Length;
                if (tagEnd < tagName.Length + 3)
                    break;
                int nextTagStart = source.IndexOf("<", tagEnd);
                if (nextTagStart > tagEnd)
                    parsed += source.Substring(tagEnd, nextTagStart - tagEnd);
                index = nextTagStart;
            }
        }

        return (MarkupString)parsed;
    }

    private int FindClosingTagIndex(string source, int start)
    {
        int index = start;
        int stack = 0;
        while (index < source.Length)
        {
            if (source[index].Equals('<'))
                ++stack;
            if (source[index].Equals('>'))
            {
                if (stack == 0)
                    return index;
                else
                    --stack;
            }
            index++;
        }
        return index;
    }

    private int GetRandomSeed()
    {
        return DateTime.UtcNow.Year*366 + DateTime.UtcNow.DayOfYear +1;
    }

}